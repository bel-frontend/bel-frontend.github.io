{"version":3,"file":"static/js/426.303bc768.chunk.js","mappings":"+PA2GA,UAzFa,SAAH,GAAuC,IAAjCA,EAAO,EAAPA,QAENC,IADQC,EAAAA,EAAAA,MAANC,GACSC,EAAAA,EAAAA,OACjB,GAAkEC,EAAAA,EAAAA,IAC9D,CACIC,cAAe,CACXC,MAAO,GACPC,SAAU,IAEdC,iBAdRC,EAAAA,GAAW,CACPH,MAAOG,EAAAA,KAAaH,QAAQI,WAC5BH,SAAUE,EAAAA,KAAaE,IAAI,GAAGC,IAAI,IAAIF,aAalCG,SAAU,YAA0B,IAAvBP,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAChBP,GACIc,EAAAA,EAAAA,IACI,CAAER,MAAAA,EAAOC,SAAAA,GACT,CACIQ,UAAW,WACPhB,EAAQiB,KAAK,IACjB,EACAC,UAAW,YAAuC,IAAlBC,EAAG,EAArBC,SAAYC,KACtBC,QAAQC,IAAIJ,GAEZK,EAAU,CAAEjB,MAAOY,GACvB,IAIhB,IAvBAM,EAAY,EAAZA,aAAcC,EAAM,EAANA,OAAQC,EAAY,EAAZA,aAAcH,EAAS,EAATA,UAAWI,EAAM,EAANA,OA2BvD,OACI,UAAC,KAAI,CAACC,WAAS,EAACC,GAAI,CAAEC,GAAI,EAAGC,GAAI,IAAK,WAClC,SAAC,KAAI,CAACC,MAAI,EAACC,GAAI,EAAGC,GAAI,KACtB,UAAC,KAAI,CAACF,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAE,WACpB,SAAC,IAAU,CAACC,UAAW,SAAUC,QAAQ,KAAI,SAAC,wEAG9C,UAAC,IAAG,CACAC,UAAU,OACVxB,SAAUa,EACVY,YAAU,EACVC,UAAW,OAAO,WAElB,SAAC,IAAS,CACNC,OAAO,QACP9B,UAAQ,EACR0B,QAAQ,WACRK,WAAS,EACTC,GAAG,QACHC,MAAO,QACPC,KAAK,QACLC,aAAa,QACbC,MAAOrB,EAAOnB,MACdyC,SAAUvB,EAAa,SACvBwB,WAAS,EACTC,WAAYtB,EAAOrB,MACnB4C,MAAOC,QAAQxB,EAAOrB,UAE1B,SAAC,IAAS,CACNI,UAAQ,EACR0B,QAAQ,WACRK,WAAS,EACTG,KAAK,WACLD,MAAO,uCACPS,KAAK,WACLV,GAAG,WACHG,aAAa,mBACbC,MAAOrB,EAAOlB,SACdwC,SAAUvB,EAAa,YACvByB,WAAYtB,EAAOpB,SACnB2C,MAAOC,QAAQxB,EAAOpB,UACtBiC,OAAO,WAEX,SAAC,IAAM,CACHY,KAAK,SACLX,WAAS,EACTL,QAAQ,YACRiB,MAAM,UACNxB,GAAI,CAAEE,GAAI,EAAGD,GAAI,GAAI,SACxB,sDAKT,SAAC,KAAI,CAACE,MAAI,EAACC,GAAI,EAAGC,GAAI,MAGlC,C","sources":["containers/Auth/Auth/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useFormik } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\n\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport { useDispatch } from 'react-redux';\nimport { Grid, Typography } from '@mui/material';\nimport { loginRequest } from 'modules/auth';\n\nconst validationSchema = (t: any) =>\n    yup.object({\n        email: yup.string().email().required(),\n        password: yup.string().min(6).max(16).required(),\n    });\n\nconst Auth = ({ history }: { history: any }) => {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n    const { handleChange, values, handleSubmit, setErrors, errors } = useFormik(\n        {\n            initialValues: {\n                email: '',\n                password: '',\n            },\n            validationSchema: validationSchema(t),\n            onSubmit: ({ email, password }) => {\n                dispatch(\n                    loginRequest(\n                        { email, password },\n                        {\n                            onSuccess: () => {\n                                history.push('/');\n                            },\n                            onFailure: ({ response: { data: err } }: any) => {\n                                console.log(err);\n\n                                setErrors({ email: err });\n                            },\n                        },\n                    ),\n                );\n            },\n        },\n    );\n\n    return (\n        <Grid container sx={{ mb: 0, mt: 30 }}>\n            <Grid item md={4} xs={2}></Grid>\n            <Grid item md={4} xs={8}>\n                <Typography textAlign={'center'} variant=\"h4\">\n                    Аўтарызацыя\n                </Typography>\n                <Box\n                    component=\"form\"\n                    onSubmit={handleSubmit}\n                    noValidate\n                    minHeight={'70vh'}\n                >\n                    <TextField\n                        margin=\"dense\"\n                        required\n                        variant=\"outlined\"\n                        fullWidth\n                        id=\"email\"\n                        label={'email'}\n                        name=\"email\"\n                        autoComplete=\"email\"\n                        value={values.email}\n                        onChange={handleChange('email')}\n                        autoFocus\n                        helperText={errors.email}\n                        error={Boolean(errors.email)}\n                    />\n                    <TextField\n                        required\n                        variant=\"outlined\"\n                        fullWidth\n                        name=\"password\"\n                        label={'пароль'}\n                        type=\"password\"\n                        id=\"password\"\n                        autoComplete=\"current-password\"\n                        value={values.password}\n                        onChange={handleChange('password')}\n                        helperText={errors.password}\n                        error={Boolean(errors.password)}\n                        margin=\"dense\"\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        sx={{ mt: 1, mb: 1 }}\n                    >\n                        Увайсці\n                    </Button>\n                </Box>\n            </Grid>\n            <Grid item md={4} xs={2}></Grid>\n        </Grid>\n    );\n};\n\nexport default Auth;\n"],"names":["history","dispatch","useTranslation","t","useDispatch","useFormik","initialValues","email","password","validationSchema","yup","required","min","max","onSubmit","loginRequest","onSuccess","push","onFailure","err","response","data","console","log","setErrors","handleChange","values","handleSubmit","errors","container","sx","mb","mt","item","md","xs","textAlign","variant","component","noValidate","minHeight","margin","fullWidth","id","label","name","autoComplete","value","onChange","autoFocus","helperText","error","Boolean","type","color"],"sourceRoot":""}