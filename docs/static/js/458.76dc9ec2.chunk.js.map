{"version":3,"file":"static/js/458.76dc9ec2.chunk.js","mappings":"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","sources":["modules/firebase/index.ts","components/Buttons/LikeButton/components/HeardIcon.tsx","webpack://bel_frontend/./src/components/Buttons/LikeButton/style.module.scss?e020","components/Buttons/LikeButton/index.tsx","webpack://bel_frontend/./src/components/Buttons/Tag/style.module.scss?4b0d","components/Buttons/Tag/index.tsx","webpack://bel_frontend/./src/components/MD/style.module.scss?4c47","components/MD/index.tsx","webpack://bel_frontend/./src/components/MetaData/style.module.scss?9f85","components/MetaData/index.tsx","constants/users.ts","webpack://bel_frontend/./src/containers/Home/components/EpisodePreview/style.module.scss?13c5","containers/Home/components/EpisodePreview/index.tsx","webpack://bel_frontend/./src/containers/Home/style.module.scss?79a9","containers/Home/index.tsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import { getDatabase, ref, set, onValue } from 'firebase/database';\nimport { initializeApp } from 'firebase/app';\nimport { getAnalytics } from 'firebase/analytics';\n\nconst firebaseConfig = {\n    apiKey: 'AIzaSyCw3D0uzLYTCx7N8IQqP_v68le913Ha75U',\n    authDomain: 'bel-frontend.firebaseapp.com',\n    projectId: 'bel-frontend',\n    messagingSenderId: '47972660046',\n    appId: '1:47972660046:web:8f3adf6f5c9c16e542241f',\n    measurementId: 'G-REGR3FB1CP',\n};\n// Initialize Firebase\nexport const app = initializeApp(firebaseConfig);\n\nconst analytics = getAnalytics(app);\n\nconst database = getDatabase(app);\n\nexport const checkArtickeIsLiked = (artickleId: any) => {\n    const items =\n        JSON.parse(localStorage.getItem('user_liked_item') || '[]') || [];\n    return items.find((i: any) => i === artickleId);\n};\n\nexport const saveLikeToLocalStorage = (artickleId: any) => {\n    const items =\n        JSON.parse(localStorage.getItem('user_liked_item') || '[]') || [];\n    localStorage.setItem(\n        'user_liked_item',\n        JSON.stringify([...items, artickleId]),\n    );\n};\n\nexport const removeLikeFromLocalStorage = (artickleId: any) => {\n    const items =\n        JSON.parse(localStorage.getItem('user_liked_item') || '[]') || [];\n    localStorage.setItem(\n        'user_liked_item',\n        JSON.stringify([...items.filter((i: any) => i !== artickleId)]),\n    );\n};\n","const HeardIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"white\"><path d=\"M12 4.248c-3.148-5.402-12-3.825-12 2.944 0 4.661 5.571 9.427 12 15.808 6.43-6.381 12-11.147 12-15.808 0-6.792-8.875-8.306-12-2.944z\"/></svg>\n);\n\nexport default HeardIcon;\n","// extracted by mini-css-extract-plugin\nexport default {\"count_likes\":\"style_count_likes__vb5OL\"};","import React from 'react';\nimport classnames from 'classnames';\nimport {\n    checkArtickeIsLiked,\n    saveLikeToLocalStorage,\n    removeLikeFromLocalStorage,\n} from 'modules/firebase';\nimport { setLikedRequest, removeLikeRequest } from 'modules/artickles';\nimport { Button } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport HeardIcon from './components/HeardIcon';\n\nimport style from './style.module.scss';\n\nexport const LikeButton = ({\n    articleId,\n    className,\n    likesCount,\n}: {\n    articleId: string;\n    className?: string;\n    likesCount: number;\n}) => {\n    const dispatch = useDispatch();\n    const [likes, setLikes] = React.useState(likesCount);\n\n    React.useEffect(() => {\n        setLikes(likesCount);\n    }, [likesCount]);\n\n    const onClick = React.useCallback(async () => {\n        if (!checkArtickeIsLiked(articleId)) {\n            await dispatch(\n                setLikedRequest(\n                    { id: articleId },\n                    {\n                        onSuccess: ({ data }: { data: any }) => {\n                            setLikes(data?.count);\n                        },\n                    },\n                ),\n            );\n            saveLikeToLocalStorage(articleId);\n        } else {\n            await dispatch(\n                removeLikeRequest(\n                    { id: articleId },\n                    {\n                        onSuccess: ({ data }: { data: any }) => {\n                            setLikes(data?.count);\n                        },\n                    },\n                ),\n            );\n            removeLikeFromLocalStorage(articleId);\n        }\n    }, [articleId]);\n\n    return (\n        <Button\n            color=\"error\"\n            type=\"button\"\n            variant=\"contained\"\n            size=\"small\"\n            onClick={onClick}\n            disableElevation\n        >\n            <HeardIcon />\n            <span className={style.count_likes}>{likes}</span>\n        </Button>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"tag\":\"style_tag__vxBM0\"};","import React from 'react';\nimport { Chip } from '@mui/material';\n\nimport style from './style.module.scss';\n\nexport const Tag = ({ children }: any) => {\n    return <Chip size=\"small\" className={style.tag} label={children} />;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__-J27M\"};","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport style from './style.module.scss';\n\nexport const MD = ({ children }: any) => {\n    return (\n        <ReactMarkdown\n            className={style.container}\n            components={{\n                code({ node, inline, className, children, ...props }) {\n                    return !inline ? (\n                        <SyntaxHighlighter\n                            language=\"javascript\"\n                            style={darcula}\n                        >\n                            {String(children).replace(/\\n$/, '')}\n                        </SyntaxHighlighter>\n                    ) : (\n                        <code className={className} {...props}>\n                            {children}\n                        </code>\n                    );\n                },\n            }}\n        >\n            {children}\n        </ReactMarkdown>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"like\":\"style_like__w+Xs-\",\"episode_meta\":\"style_episode_meta__kDtMn\"};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { LikeButton, Tag } from 'components';\nimport { Button, Box } from '@mui/material';\n\nimport style from './style.module.scss';\n\nexport const MetaData = ({\n    meta,\n    showReadButton = true,\n    url,\n    articleId,\n    likes,\n}: any) => {\n    const { author = '', dateArticle = '' } = meta || {};\n\n    return (\n        <>\n            <div className={style.episode_meta}>\n                {showReadButton ? (\n                    <Link to={url}>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"small\"\n                            disableElevation\n                        >\n                            Чытаць\n                        </Button>\n                    </Link>\n                ) : null}\n                {showReadButton ? (\n                    <LikeButton likesCount={likes} articleId={articleId} />\n                ) : null}\n            </div>\n            <div>\n                {(meta?.tags.toString().split(',') || []).map((tag: string) => (\n                    <Tag key={tag}>{tag}</Tag>\n                ))}\n            </div>\n            <Box marginTop={1}>\n                <span className=\"author\">{author}</span>,\n                <span className=\"date-article\"> {dateArticle}</span>\n            </Box>\n        </>\n    );\n};\n","export enum USER_ROLES {\n    USER = 'USER',\n    SUPERADMIN = 'SUPERADMIN',\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"alfa\":\"style_alfa__0PwVD\",\"deactivatedLink\":\"style_deactivatedLink__B+CHs\"};","import React from 'react';\nimport { MetaData } from 'components/MetaData';\nimport { Link } from 'react-router-dom';\nimport { MD } from 'components';\nimport { useInView } from 'react-intersection-observer';\n\nimport IconButton from '@mui/material/IconButton';\nimport EditIcon from '@mui/icons-material/Edit';\nimport Chip from '@mui/material/Chip';\n\nimport { USER_ROLES } from 'constants/users';\nimport style from './style.module.scss';\n\nexport const EpisodePreview = ({\n    meta,\n    id,\n    content,\n    history,\n    userIsAuth,\n    isActive,\n    likes = 0,\n    currentUser,\n}: any) => {\n    const { ref, entry } = useInView({ threshold: 0 });\n    const url = id ? `/article/${id}` : '/';\n    const { user_id } = meta;\n    const { role } = currentUser;\n\n    return (\n        <article className=\"episode box\" ref={ref}>\n            {entry?.isIntersecting && (\n                <>\n                    <div className=\"article\">\n                        <h2 className=\"episode__title\">\n                            <Link\n                                className={\n                                    userIsAuth && !isActive\n                                        ? style.deactivatedLink\n                                        : style.link\n                                }\n                                to={meta ? url : '/'}\n                            >\n                                {meta.title}\n                            </Link>\n                            {userIsAuth && !isActive ? (\n                                <Chip sx={{ ml: 2, mr: 2 }} label=\"Выключана\" />\n                            ) : null}\n                            {userIsAuth &&\n                            (role === USER_ROLES.SUPERADMIN ||\n                                user_id === currentUser?.user_id) ? (\n                                <IconButton\n                                    sx={{ ml: 1 }}\n                                    color=\"secondary\"\n                                    onClick={() => {\n                                        history.push(`/editor/${id}`);\n                                    }}\n                                >\n                                    <EditIcon />\n                                </IconButton>\n                            ) : null}\n                        </h2>\n                        <div className=\"content\">\n                            <MD>{content}</MD>\n                        </div>\n                    </div>\n                    <div className={style.alfa}></div>\n                    <MetaData\n                        meta={{ ...meta }}\n                        likes={likes}\n                        articleId={id}\n                        url={url}\n                    />\n                </>\n            )}\n        </article>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"style_main__ukDpv\",\"telegram\":\"style_telegram__AcsTO\"};","import React, { useEffect } from 'react';\nimport Box from '@mui/material/Box';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    getArticklesRequest,\n    getArticklesSelector,\n    searchArticle,\n} from 'modules/artickles';\n\nimport { EpisodePreview } from './components/EpisodePreview/';\nimport style from './style.module.scss';\nimport { getCurrentUserSelector } from 'modules/auth';\n\nconst Home = ({\n    route: { userIsAuth },\n    history,\n    location: { search },\n    ...props\n}: {\n    route: { userIsAuth?: boolean };\n    [key: string]: any;\n}) => {\n    const dispatch = useDispatch();\n    const currentUser = useSelector(getCurrentUserSelector);\n\n    React.useEffect(() => {\n        const query = new URLSearchParams(search);\n        const text = query.get('seacrhText');\n        dispatch(searchArticle(text));\n    }, [search]);\n\n    const { articles }: any = useSelector(getArticklesSelector);\n\n    const preparedArticles = React.useMemo(() => {\n        return articles;\n    }, [articles]);\n\n    return (\n        <>\n            <Box component={'main'} className={style.main}>\n                <a\n                    className={style.telegram}\n                    href=\"https://t.me/bel_frontend\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    Далучайцеся да нашага Тэлеграм-канала\n                </a>\n\n                {preparedArticles &&\n                    preparedArticles.map(\n                        (\n                            {\n                                content,\n                                meta,\n                                id,\n                                isActive,\n                                likes,\n                            }: {\n                                content: string;\n                                meta: any;\n                                id: any;\n                                isActive: boolean;\n                                likes: any;\n                            },\n                            index: number,\n                        ) =>\n                            meta ? (\n                                <EpisodePreview\n                                    currentUser={currentUser}\n                                    history={history}\n                                    key={index}\n                                    userIsAuth={userIsAuth}\n                                    content={content}\n                                    meta={meta}\n                                    id={id}\n                                    isActive={isActive}\n                                    likes={likes}\n                                />\n                            ) : null,\n                    )}\n            </Box>\n        </>\n    );\n};\n\nexport default Home;\n","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["app","initializeApp","apiKey","authDomain","projectId","messagingSenderId","appId","measurementId","checkArtickeIsLiked","getAnalytics","getDatabase","artickleId","JSON","parse","localStorage","getItem","find","i","saveLikeToLocalStorage","items","setItem","stringify","removeLikeFromLocalStorage","filter","xmlns","width","height","viewBox","fill","d","LikeButton","articleId","likesCount","className","dispatch","useDispatch","React","likes","setLikes","onClick","setLikedRequest","id","onSuccess","data","count","removeLikeRequest","Button","color","type","variant","size","disableElevation","style","Tag","children","Chip","label","MD","components","code","node","inline","props","language","darcula","String","replace","MetaData","meta","showReadButton","url","author","dateArticle","to","tags","toString","split","map","tag","Box","marginTop","USER_ROLES","EpisodePreview","content","history","userIsAuth","isActive","currentUser","useInView","threshold","ref","entry","user_id","role","isIntersecting","title","sx","ml","mr","IconButton","push","Edit","route","search","location","useSelector","getCurrentUserSelector","text","URLSearchParams","get","searchArticle","articles","getArticklesSelector","preparedArticles","component","href","target","rel","index","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","key","root","has","set","observe","element","callback","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","instance","thresholds","elements","observer","entries","forEach","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","splice","indexOf","length","delete","unobserve","disconnect","isPlainChildren","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","state","setState","current","entryTarget","_state$entry","previousEntryTarget","result"],"sourceRoot":""}