const fs = require("fs");
const htmlmin = require("html-minifier-terser");
const markdown = require("markdown-it")({ html: true });
const prettydata = require("pretty-data");

module.exports = (config) => {
    config.addPassthroughCopy("src/favicon.ico");
    config.addPassthroughCopy("src/fonts");
    config.addPassthroughCopy("src/images");
    config.addPassthroughCopy("src/scripts");
    config.addPassthroughCopy("src/styles");
    config.addPassthroughCopy("src/episodes/**/*.(png|jpg|mp3)");

    config.addPairedShortcode("markdown", (content) => {
        return markdown.render(content);
    });

    config.addFilter("length", (path) => {
        const stats = fs.statSync(path);
        return stats.size;
    });

    config.setLibrary(
        "md",
        require("markdown-it")({
            html: true,
            linkify: true,
            replaceLink: function (link) {
                const baseUrl = "https://bel-frontend.github.io/";

                return link.startsWith("http")
                    ? link
                    : `${baseUrl}/episodes/${link}`;
            },
        }).use(require("markdown-it-replace-link"))
    );

    const htmlminSettings = {
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        decodeEntities: true,
        includeAutoGeneratedTags: false,
        removeComments: true,
        sortClassName: true,
    };

    config.addFilter("htmlmin", async (value) => {
        return await htmlmin.minify(value, htmlminSettings);
    });

    config.addTransform("htmlmin", (content, outputPath) => {
        if (outputPath && outputPath.endsWith(".html")) {
            const result = htmlmin.minify(content, htmlminSettings);

            return result;
        }

        return content;
    });

    config.addTransform("xmlmin", (content, outputPath) => {
        if (outputPath && outputPath.endsWith(".xml")) {
            return prettydata.pd.xmlmin(content);
        }
        return content;
    });

    return {
        dir: {
            input: "src",
            output: "docs",
            includes: "includes",
            layouts: "layouts",
        },
        dataTemplateEngine: "njk",
        markdownTemplateEngine: "njk",
        htmlTemplateEngine: "njk",
        passthroughFileCopy: true,
        templateFormats: ["md", "njk"],
    };
};
